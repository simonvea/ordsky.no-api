AWSTemplateFormatVersion: 2010-09-09
Description: >
  ordsky-apiv2
  Handles word cloud sessions for ordsky.no
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: String
    Description: The arn of the managed apigateway push to cloudwatch logs policy
  OrdskyACM:
    Type: String
    Description: The id of the ordsky certificate in ACM

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    Environment:
      Variables:
        SESSION_TABLE: !Ref OrdskySessionTable

Resources:
  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lets API Gateway push to CloudWatch logs
      ManagedPolicyArns:
        - !Ref AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchLogsRole.Arn

  OrdskyDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: api.ordsky.no
      DomainNameConfigurations:
        - CertificateArn: !Sub arn:aws:acm:eu-north-1:${AWS::AccountId}:certificate/${OrdskyACM}
          CertificateName: ordsky
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  OrdskyWebsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: OrdskyWebsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  StartSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteKey: startsession
      RouteResponseSelectionExpression: $default
      AuthorizationType: NONE
      OperationName: StartSessionRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref StartSessionInteg
  StartSessionInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdskyWebsocket
      Description: Start Session Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionFunction.Arn}/invocations
  StartSessionIntegResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      IntegrationId: !Ref StartSessionInteg
      ApiId: !Ref OrdskyWebsocket
      IntegrationResponseKey: $default
  StartSessionResponseRoute:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteId: !Ref StartSessionRoute
      RouteResponseKey: $default

  SaveWordsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteKey: savewords
      AuthorizationType: NONE
      OperationName: SaveWordsRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SaveWordsInteg
  SaveWordsInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdskyWebsocket
      Description: Save Words Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveWordsFunction.Arn}/invocations

  GetWordsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteKey: getwords
      RouteResponseSelectionExpression: $default
      AuthorizationType: NONE
      OperationName: GetWordsRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetWordsInteg
  GetWordsInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdskyWebsocket
      Description: Get Words Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWordsFunction.Arn}/invocations
  GetWordsResponseRoute:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteId: !Ref GetWordsRoute
      RouteResponseKey: $default

  SaveCloudRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OrdskyWebsocket
      RouteKey: savecloud
      AuthorizationType: NONE
      OperationName: SaveCloudRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SaveCloudInteg
  SaveCloudInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OrdskyWebsocket
      Description: Save Cloud Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveCloudFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - StartSessionRoute
      - SaveWordsRoute
      - SaveCloudRoute
    Properties:
      ApiId: !Ref OrdskyWebsocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref OrdskyWebsocket
      DefaultRouteSettings:
        LoggingLevel: INFO

  OrdskyApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref OrdskyWebsocket
      DomainName: api.ordsky.no
      Stage: !Ref Stage

  StartSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/start-session/
      MemorySize: 256
      Timeout: 2
      Description: Saves admin connection Id to table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdskySessionTable
  StartSessionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdskyWebsocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartSessionFunction
      Principal: apigateway.amazonaws.com

  SaveWordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/save-words/
      MemorySize: 256 # TODO: Figure out the best size in terms of time-price
      Timeout: 5
      Description: Save words to a DynamoDB table.
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdskySessionTable
        - Statement: # TODO: Make this a policy document
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrdskyWebsocket}/*'
  SaveWordsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdskyWebsocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SaveWordsFunction
      Principal: apigateway.amazonaws.com

  GetWordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-words/
      MemorySize: 256 # TODO: Figure out the best size in terms of time-price
      Timeout: 3
      Description: Get words from table.
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdskySessionTable
  GetWordsPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdskyWebsocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetWordsFunction
      Principal: apigateway.amazonaws.com

  SaveCloudFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/save-cloud/
      MemorySize: 256
      Timeout: 5
      Description: Saves cloud to DynamoDB table.
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdskySessionTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrdskyWebsocket}/*'
  SaveCloudPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - OrdskyWebsocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SaveCloudFunction
      Principal: apigateway.amazonaws.com

  # DynamoDB table to store words and clouds
  OrdskySessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdskySession
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: connectionIds
          AttributeType: SS
        - AttributeName: words
          AttributeType: L
        - AttributeName: numberOfEntries
          AttributeType: N
        - AttributeName: cloud
          AttributeType: L
        - AttributeName: expdate
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 2
      TimeToLiveSpecification:
        AttributeName: expdate
        Enabled: True

  OrdskySessionWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: OrdskySessionTable
    Properties:
      MaxCapacity: 25
      MinCapacity: 2
      ResourceId: !Sub table/${OrdskySessionTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      ServiceNamespace: dynamodb
      ScheduledActions:
        - ScalableTargetAction:
            MaxCapacity: 25
            MinCapacity: 5
          Schedule: cron(0 8-17 ? * MON-FRI *) # Every mon-fri 8-17
          ScheduledActionName: Weekly autoscaling

  OrdskySessionWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref OrdskySessionWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70 # means 70 percent of the current provisioned throughput
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

Outputs:
  WebSocketURI:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'wss://${OrdskyWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/'
